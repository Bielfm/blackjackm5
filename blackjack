#include <iostream>
#include <string>
#include <vector>
#include <Windows.h>
#include <algorithm>
#include <ctime>
#include <cstdlib>

using namespace std;

const int PUNTUACION_MAXIMA = 21;
const int PUNTUACION_MINIMA_DEALER = 17;
const int NUMERO_PALOS = 4;
const int NUMERO_RANKS = 13;
const string PALOS[NUMERO_PALOS] = { "Corazones", "Diamantes", "Treboles", "Espadas" };
const string RANKS[NUMERO_RANKS] = { "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jota", "Reina", "Rey", "AS" };

struct Carta {
    string palo;
    string rango;
    int valor;
};

class Baraja {
private:
    vector<Carta> cartas;

public:
    Baraja() {
        for (int i = 0; i < NUMERO_PALOS; i++) {
            for (int j = 0; j < NUMERO_RANKS; j++) {
                Carta carta;
                carta.palo = PALOS[i];
                carta.rango = RANKS[j];
                if (j < 9) {
                    carta.valor = j + 2;
                }
                else if (j < 12) {
                    carta.valor = 10;
                }
                else {
                    carta.valor = 11;
                }
                cartas.push_back(carta);
            }
        }
    }

    void barajar() {
        random_shuffle(cartas.begin(), cartas.end());
    }

    Carta robar() {
        Carta carta = cartas.back();
        cartas.pop_back();
        return carta;
    }
};

class Jugador {
private:
    vector<Carta> mano;

public:
    void agregar_carta(Carta carta) {
        mano.push_back(carta);
    }

    int obtener_puntuacion() {
        int puntuacion = 0;
        int num_As = 0;
        for (int i = 0; i < mano.size(); i++) {
            puntuacion += mano[i].valor;
            if (mano[i].rango == "As") {
                num_As++;
            }
        }
        while (puntuacion > PUNTUACION_MAXIMA && num_As > 0) {
            puntuacion -= 10;
            num_As--;
        }
        return puntuacion;
    }

    void mostrar_mano() {
        for (int i = 0; i < mano.size(); i++) {
            cout << mano[i].rango << " de " << mano[i].palo << endl;
        }
        cout << "Puntuacion: " << obtener_puntuacion() << endl;
    }
};

class Blackjack {
private:
    Baraja baraja;
    Jugador jugador;
    Jugador crupier;

public:
    Blackjack() {
        baraja.barajar();
        jugador.agregar_carta(baraja.robar());
        jugador.agregar_carta(baraja.robar());
        crupier.agregar_carta(baraja.robar());
    }

    void jugar() {
        cout << "Tu mano:" << endl;
        jugador.mostrar_mano();
        cout << endl;
        cout << "Mano del crupier:" << endl;
        crupier.mostrar_mano();
        cout << endl;
        while (jugador.obtener_puntuacion() < PUNTUACION_MAXIMA) {
            cout << "¿Quieres pedir o plantarte? ";
            string eleccion;
            cin >> eleccion;
            if (eleccion == "pedir") {
                jugador.agregar_carta(baraja.robar());
                cout << "Tu mano:" << endl;
                jugador.mostrar_mano();
                cout << endl;
                if (jugador.obtener_puntuacion() > PUNTUACION_MAXIMA) {
                    cout << "¡Te has pasado!" << endl;
                    return;
                }
            }
            else {
                break;
            }
        }
        while (crupier.obtener_puntuacion() < PUNTUACION_MINIMA_DEALER) {
            crupier.agregar_carta(baraja.robar());
        }
        cout << "Mano del crupier:" << endl;
        crupier.mostrar_mano();
        cout << endl;
        if (crupier.obtener_puntuacion() > PUNTUACION_MAXIMA) {
            cout << "¡El crupier se ha pasado! ¡Has ganado!" << endl;
        }
        else if (jugador.obtener_puntuacion() > crupier.obtener_puntuacion()) {
            cout << "¡Has ganado!" << endl;
        }
        else if (jugador.obtener_puntuacion() < crupier.obtener_puntuacion()) {
            cout << "¡Has perdido!" << endl;
        }
        else {
            cout << "¡Empate!" << endl;
        }
    }
};

int main() {
    srand(time(NULL));
    Blackjack blackjack;
    blackjack.jugar();
    return 0;
}
